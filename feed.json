{
    "version": "https://jsonfeed.org/version/1",
    "title": "ACE-BLOG",
    "home_page_url": "https://ace520.github.io/blog",
    "feed_url": "https://ace520.github.io/blog/feed.json",
    "description": "Ace blog",
    "items": [
        {
            "id": "https://ace520.github.io/blog/2018/11/07/frontmatter-in-vuepress-2/",
            "url": "https://ace520.github.io/blog/2018/11/07/frontmatter-in-vuepress-2/",
            "title": "frontmatter in vuepress 2",
            "summary": "Any markdown file that contains a YAML front matter block will be processed by gray-matter. The front matter must be the first thing in the markdown file and must take the form of valid YAML set between triple-dashed lines. Here is a basic example:",
            "date_modified": "2018-11-07T00:00:00.000Z"
        },
        {
            "id": "https://ace520.github.io/blog/2018/11/07/frontmatter-in-vuepress/",
            "url": "https://ace520.github.io/blog/2018/11/07/frontmatter-in-vuepress/",
            "title": "frontmatter in vuepress 1",
            "summary": "`",
            "date_modified": "2018-11-07T00:00:00.000Z"
        },
        {
            "id": "https://ace520.github.io/blog/2019/06/18/travis-ci-tutorial/",
            "url": "https://ace520.github.io/blog/2019/06/18/travis-ci-tutorial/",
            "title": "Travis CI持续集成服务",
            "date_modified": "2019-06-18T00:00:00.000Z"
        },
        {
            "id": "https://ace520.github.io/blog/2019/02/26/markdown-slot-2/",
            "url": "https://ace520.github.io/blog/2019/02/26/markdown-slot-2/",
            "title": "Markdown Slot 2",
            "summary": "VuePress implements a content distribution API for Markdown. With this feature, you can split your document into multiple fragments to facilitate flexible composition in the layout component.",
            "date_modified": "2019-02-26T00:00:00.000Z"
        },
        {
            "id": "https://ace520.github.io/blog/2019/02/26/markdown-slot-3/",
            "url": "https://ace520.github.io/blog/2019/02/26/markdown-slot-3/",
            "title": "Markdown Slot 3",
            "summary": "First, let's review the relationship between layout components and markdown files:",
            "date_modified": "2019-02-26T00:00:00.000Z"
        },
        {
            "id": "https://ace520.github.io/blog/2019/02/26/markdown-slot-4/",
            "url": "https://ace520.github.io/blog/2019/02/26/markdown-slot-4/",
            "title": "Markdown Slot 4",
            "summary": "Here's some contact info",
            "date_modified": "2019-02-26T00:00:00.000Z"
        },
        {
            "id": "https://ace520.github.io/blog/2019/02/26/markdown-slot/",
            "url": "https://ace520.github.io/blog/2019/02/26/markdown-slot/",
            "title": "Markdown Slot 1",
            "summary": "Markdown files are providers of metadata (Page content, Configuration, etc.), while layout components consume them. We can use frontmatter to define some metadata for common data types, but frontmatter is hard to do something about markdown / HTML, a complex metadata that involves differences before and after compilation.",
            "date_modified": "2019-02-26T00:00:00.000Z"
        },
        {
            "id": "https://ace520.github.io/blog/2019/05/06/writing-a-vuepress-theme-2/",
            "url": "https://ace520.github.io/blog/2019/05/06/writing-a-vuepress-theme-2/",
            "title": "writing a vuepress theme 2",
            "summary": "To write a theme, create a .vuepress/theme directory in your docs root, and then create a Layout.vue file:\n.\n└─ .vuepress\n   └─ theme\n       └─ Layout.vue\n\nFrom there it's the same as developing a normal Vue application. It is entirely up to you how to organize your theme.\nContent Outlet\nThe compiled content of the current .md file being rendered will be available as a special &lt;Content/&gt; global component. You will need to render it somewhere in your layout in order to display the content of the page. The simplest theme can be just a single Layout.vue component with the following content:\n&lt;template>\n  &lt;div class=\"theme-container\">\n    &lt;Content/>\n  &lt;/div>\n&lt;/template>\n\nAlso see:\n\nMarkdown Slot\n\nDirectory Structure\nJust one Layout.vue might not be enough, and you might also want to define more layout components in the theme for using on different pages. You may also want to customize the palette, and even apply some plugins.\nSo it's time to reorganize your theme, an agreed theme directory structure is as follows:\n::: vue\ntheme\n├── global-components\n│   └── xxx.vue\n├── components\n│   └── xxx.vue\n├── layouts\n│   ├── Layout.vue (Mandatory)\n│   └── 404.vue\n├── styles\n│   ├── index.styl\n│   └── palette.styl\n├── templates\n│   ├── dev.html\n│   └── ssr.html\n├── index.js\n├── enhanceApp.js\n└── package.json\n:::\n\ntheme/global-components: Components under this directory will be automatically registered as global components. For details, please refer to @vuepress/plugin-register-components.\ntheme/components: Your components.\ntheme/layouts: Layout components of the theme, where Layout.vue is required.\ntheme/styles: Global style and palette.\ntheme/templates: Modify default template.\ntheme/index.js: Entry file of theme configuration.\ntheme/enhanceApp.js: Theme level enhancements.\n\n::: warning Note\nWhen you publish your theme as an NPM package, if you don't have any theme configuration, that means you don't have theme/index.js, you'll need to set the &quot;main&quot; field  to layouts/Layout.vue in package.json, only in this way VuePress can correctly resolve the theme.\n{\n  ...\n  \"main\": \"layouts/Layout.vue\",\n  ...\n}\n\n:::\nLayout Component\nSuppose your theme layouts folder is as follows:\n::: vue\ntheme\n└── layouts\n   ├── Layout.vue\n   ├── AnotherLayout.vue\n   └── 404.vue\n:::\nThen, all the pages will use Layout.vue as layout component by default, while the routes not matching will use 404.vue.\nIf you want to switch the layout of some pages to AnotherLayout.vue, you just need to update the frontmatter of this page:\n---\nlayout: AnotherLayout\n---\n\n::: tip\nEach layout component may render distinct pages. If you want to apply some global UI (e.g. global header), consider using globalLayout。\n:::\nApply plugins\nYou can apply some plugins to the theme via theme/index.js.\nmodule.exports = {\n  plugins: [\n    ['@vuepress/pwa', {\n      serviceWorker: true,\n      updatePopup: true\n    }]\n  ]\n}\n\nSite and Page Metadata\nThe Layout component will be invoked once for every .md file in docs, and the metadata for the entire site and that specific page will be exposed respectively as this.$site and this.$page properties which are injected into every component in the app.\nThis is the value of $site of this very website:\n{\n  \"title\": \"VuePress\",\n  \"description\": \"Vue-powered Static Site Generator\",\n  \"base\": \"/\",\n  \"pages\": [\n    {\n      \"lastUpdated\": 1524027677000,\n      \"path\": \"/\",\n      \"title\": \"VuePress\",\n      \"frontmatter\": {}\n    },\n    ...\n  ]\n}\n\ntitle, description and base are copied from respective fields in .vuepress/config.js. pages contains an array of metadata objects for each page, including its path, page title (explicitly specified in YAML front matter or inferred from the first header on the page), and any YAML front matter data in that file.\nThis is the $page object for this page you are looking at:\n{\n  \"lastUpdated\": 1524847549000,\n  \"path\": \"/guide/custom-themes.html\",\n  \"title\": \"Custom Themes\",\n  \"headers\": [/* ... */],\n  \"frontmatter\": {}\n}\n\nIf the user provided themeConfig in .vuepress/config.js, it will also be available as $site.themeConfig. You can use this to allow users to customize behavior of your theme - for example, specifying categories and page order. You can then use these data together with $site.pages to dynamically construct navigation links.\nFinally, don't forget that this.$route and this.$router are also available as part of Vue Router's API.\n::: tip\nlastUpdated is the UNIX timestamp of this file's last git commit, for more details, refer to Last Updated.\n:::\nContent Excerpt\nIf a markdown file contains a `",
            "date_modified": "2019-05-06T00:00:00.000Z"
        },
        {
            "id": "https://ace520.github.io/blog/2019/05/06/writing-a-vuepress-theme-3/",
            "url": "https://ace520.github.io/blog/2019/05/06/writing-a-vuepress-theme-3/",
            "title": "writing a vuepress theme 3",
            "summary": "To write a theme, create a .vuepress/theme directory in your docs root, and then create a Layout.vue file:\n.\n└─ .vuepress\n   └─ theme\n       └─ Layout.vue\n\nFrom there it's the same as developing a normal Vue application. It is entirely up to you how to organize your theme.\nContent Outlet\nThe compiled content of the current .md file being rendered will be available as a special &lt;Content/&gt; global component. You will need to render it somewhere in your layout in order to display the content of the page. The simplest theme can be just a single Layout.vue component with the following content:\n&lt;template>\n  &lt;div class=\"theme-container\">\n    &lt;Content/>\n  &lt;/div>\n&lt;/template>\n\nAlso see:\n\nMarkdown Slot\n\nDirectory Structure\nJust one Layout.vue might not be enough, and you might also want to define more layout components in the theme for using on different pages. You may also want to customize the palette, and even apply some plugins.\nSo it's time to reorganize your theme, an agreed theme directory structure is as follows:\n::: vue\ntheme\n├── global-components\n│   └── xxx.vue\n├── components\n│   └── xxx.vue\n├── layouts\n│   ├── Layout.vue (Mandatory)\n│   └── 404.vue\n├── styles\n│   ├── index.styl\n│   └── palette.styl\n├── templates\n│   ├── dev.html\n│   └── ssr.html\n├── index.js\n├── enhanceApp.js\n└── package.json\n:::\n\ntheme/global-components: Components under this directory will be automatically registered as global components. For details, please refer to @vuepress/plugin-register-components.\ntheme/components: Your components.\ntheme/layouts: Layout components of the theme, where Layout.vue is required.\ntheme/styles: Global style and palette.\ntheme/templates: Modify default template.\ntheme/index.js: Entry file of theme configuration.\ntheme/enhanceApp.js: Theme level enhancements.\n\n::: warning Note\nWhen you publish your theme as an NPM package, if you don't have any theme configuration, that means you don't have theme/index.js, you'll need to set the &quot;main&quot; field  to layouts/Layout.vue in package.json, only in this way VuePress can correctly resolve the theme.\n{\n  ...\n  \"main\": \"layouts/Layout.vue\",\n  ...\n}\n\n:::\nLayout Component\nSuppose your theme layouts folder is as follows:\n::: vue\ntheme\n└── layouts\n   ├── Layout.vue\n   ├── AnotherLayout.vue\n   └── 404.vue\n:::\nThen, all the pages will use Layout.vue as layout component by default, while the routes not matching will use 404.vue.\nIf you want to switch the layout of some pages to AnotherLayout.vue, you just need to update the frontmatter of this page:\n---\nlayout: AnotherLayout\n---\n\n::: tip\nEach layout component may render distinct pages. If you want to apply some global UI (e.g. global header), consider using globalLayout。\n:::\nApply plugins\nYou can apply some plugins to the theme via theme/index.js.\nmodule.exports = {\n  plugins: [\n    ['@vuepress/pwa', {\n      serviceWorker: true,\n      updatePopup: true\n    }]\n  ]\n}\n\nSite and Page Metadata\nThe Layout component will be invoked once for every .md file in docs, and the metadata for the entire site and that specific page will be exposed respectively as this.$site and this.$page properties which are injected into every component in the app.\nThis is the value of $site of this very website:\n{\n  \"title\": \"VuePress\",\n  \"description\": \"Vue-powered Static Site Generator\",\n  \"base\": \"/\",\n  \"pages\": [\n    {\n      \"lastUpdated\": 1524027677000,\n      \"path\": \"/\",\n      \"title\": \"VuePress\",\n      \"frontmatter\": {}\n    },\n    ...\n  ]\n}\n\ntitle, description and base are copied from respective fields in .vuepress/config.js. pages contains an array of metadata objects for each page, including its path, page title (explicitly specified in YAML front matter or inferred from the first header on the page), and any YAML front matter data in that file.\nThis is the $page object for this page you are looking at:\n{\n  \"lastUpdated\": 1524847549000,\n  \"path\": \"/guide/custom-themes.html\",\n  \"title\": \"Custom Themes\",\n  \"headers\": [/* ... */],\n  \"frontmatter\": {}\n}\n\nIf the user provided themeConfig in .vuepress/config.js, it will also be available as $site.themeConfig. You can use this to allow users to customize behavior of your theme - for example, specifying categories and page order. You can then use these data together with $site.pages to dynamically construct navigation links.\nFinally, don't forget that this.$route and this.$router are also available as part of Vue Router's API.\n::: tip\nlastUpdated is the UNIX timestamp of this file's last git commit, for more details, refer to Last Updated.\n:::\nContent Excerpt\nIf a markdown file contains a `",
            "date_modified": "2019-05-06T00:00:00.000Z"
        },
        {
            "id": "https://ace520.github.io/blog/2019/05/06/writing-a-vuepress-theme-4/",
            "url": "https://ace520.github.io/blog/2019/05/06/writing-a-vuepress-theme-4/",
            "title": "writing a vuepress theme 4",
            "summary": "To write a theme, create a .vuepress/theme directory in your docs root, and then create a Layout.vue file:\n.\n└─ .vuepress\n   └─ theme\n       └─ Layout.vue\n\nFrom there it's the same as developing a normal Vue application. It is entirely up to you how to organize your theme.\nContent Outlet\nThe compiled content of the current .md file being rendered will be available as a special &lt;Content/&gt; global component. You will need to render it somewhere in your layout in order to display the content of the page. The simplest theme can be just a single Layout.vue component with the following content:\n&lt;template>\n  &lt;div class=\"theme-container\">\n    &lt;Content/>\n  &lt;/div>\n&lt;/template>\n\nAlso see:\n\nMarkdown Slot\n\nDirectory Structure\nJust one Layout.vue might not be enough, and you might also want to define more layout components in the theme for using on different pages. You may also want to customize the palette, and even apply some plugins.\nSo it's time to reorganize your theme, an agreed theme directory structure is as follows:\n::: vue\ntheme\n├── global-components\n│   └── xxx.vue\n├── components\n│   └── xxx.vue\n├── layouts\n│   ├── Layout.vue (Mandatory)\n│   └── 404.vue\n├── styles\n│   ├── index.styl\n│   └── palette.styl\n├── templates\n│   ├── dev.html\n│   └── ssr.html\n├── index.js\n├── enhanceApp.js\n└── package.json\n:::\n\ntheme/global-components: Components under this directory will be automatically registered as global components. For details, please refer to @vuepress/plugin-register-components.\ntheme/components: Your components.\ntheme/layouts: Layout components of the theme, where Layout.vue is required.\ntheme/styles: Global style and palette.\ntheme/templates: Modify default template.\ntheme/index.js: Entry file of theme configuration.\ntheme/enhanceApp.js: Theme level enhancements.\n\n::: warning Note\nWhen you publish your theme as an NPM package, if you don't have any theme configuration, that means you don't have theme/index.js, you'll need to set the &quot;main&quot; field  to layouts/Layout.vue in package.json, only in this way VuePress can correctly resolve the theme.\n{\n  ...\n  \"main\": \"layouts/Layout.vue\",\n  ...\n}\n\n:::\nLayout Component\nSuppose your theme layouts folder is as follows:\n::: vue\ntheme\n└── layouts\n   ├── Layout.vue\n   ├── AnotherLayout.vue\n   └── 404.vue\n:::\nThen, all the pages will use Layout.vue as layout component by default, while the routes not matching will use 404.vue.\nIf you want to switch the layout of some pages to AnotherLayout.vue, you just need to update the frontmatter of this page:\n---\nlayout: AnotherLayout\n---\n\n::: tip\nEach layout component may render distinct pages. If you want to apply some global UI (e.g. global header), consider using globalLayout。\n:::\nApply plugins\nYou can apply some plugins to the theme via theme/index.js.\nmodule.exports = {\n  plugins: [\n    ['@vuepress/pwa', {\n      serviceWorker: true,\n      updatePopup: true\n    }]\n  ]\n}\n\nSite and Page Metadata\nThe Layout component will be invoked once for every .md file in docs, and the metadata for the entire site and that specific page will be exposed respectively as this.$site and this.$page properties which are injected into every component in the app.\nThis is the value of $site of this very website:\n{\n  \"title\": \"VuePress\",\n  \"description\": \"Vue-powered Static Site Generator\",\n  \"base\": \"/\",\n  \"pages\": [\n    {\n      \"lastUpdated\": 1524027677000,\n      \"path\": \"/\",\n      \"title\": \"VuePress\",\n      \"frontmatter\": {}\n    },\n    ...\n  ]\n}\n\ntitle, description and base are copied from respective fields in .vuepress/config.js. pages contains an array of metadata objects for each page, including its path, page title (explicitly specified in YAML front matter or inferred from the first header on the page), and any YAML front matter data in that file.\nThis is the $page object for this page you are looking at:\n{\n  \"lastUpdated\": 1524847549000,\n  \"path\": \"/guide/custom-themes.html\",\n  \"title\": \"Custom Themes\",\n  \"headers\": [/* ... */],\n  \"frontmatter\": {}\n}\n\nIf the user provided themeConfig in .vuepress/config.js, it will also be available as $site.themeConfig. You can use this to allow users to customize behavior of your theme - for example, specifying categories and page order. You can then use these data together with $site.pages to dynamically construct navigation links.\nFinally, don't forget that this.$route and this.$router are also available as part of Vue Router's API.\n::: tip\nlastUpdated is the UNIX timestamp of this file's last git commit, for more details, refer to Last Updated.\n:::\nContent Excerpt\nIf a markdown file contains a `",
            "date_modified": "2019-05-06T00:00:00.000Z"
        },
        {
            "id": "https://ace520.github.io/blog/2019/05/06/writing-a-vuepress-theme/",
            "url": "https://ace520.github.io/blog/2019/05/06/writing-a-vuepress-theme/",
            "title": "Writing a vuepress theme 1",
            "summary": "To write a theme, create a .vuepress/theme directory in your docs root, and then create a Layout.vue file:\n.\n└─ .vuepress\n   └─ theme\n       └─ Layout.vue\n\nFrom there it's the same as developing a normal Vue application. It is entirely up to you how to organize your theme.\nContent Outlet\nThe compiled content of the current .md file being rendered will be available as a special &lt;Content/&gt; global component. You will need to render it somewhere in your layout in order to display the content of the page. The simplest theme can be just a single Layout.vue component with the following content:\n&lt;template>\n  &lt;div class=\"theme-container\">\n    &lt;Content/>\n  &lt;/div>\n&lt;/template>\n\nAlso see:\n\nMarkdown Slot\n\nDirectory Structure\nJust one Layout.vue might not be enough, and you might also want to define more layout components in the theme for using on different pages. You may also want to customize the palette, and even apply some plugins.\nSo it's time to reorganize your theme, an agreed theme directory structure is as follows:\n::: vue\ntheme\n├── global-components\n│   └── xxx.vue\n├── components\n│   └── xxx.vue\n├── layouts\n│   ├── Layout.vue (Mandatory)\n│   └── 404.vue\n├── styles\n│   ├── index.styl\n│   └── palette.styl\n├── templates\n│   ├── dev.html\n│   └── ssr.html\n├── index.js\n├── enhanceApp.js\n└── package.json\n:::\n\ntheme/global-components: Components under this directory will be automatically registered as global components. For details, please refer to @vuepress/plugin-register-components.\ntheme/components: Your components.\ntheme/layouts: Layout components of the theme, where Layout.vue is required.\ntheme/styles: Global style and palette.\ntheme/templates: Modify default template.\ntheme/index.js: Entry file of theme configuration.\ntheme/enhanceApp.js: Theme level enhancements.\n\n::: warning Note\nWhen you publish your theme as an NPM package, if you don't have any theme configuration, that means you don't have theme/index.js, you'll need to set the &quot;main&quot; field  to layouts/Layout.vue in package.json, only in this way VuePress can correctly resolve the theme.\n{\n  ...\n  \"main\": \"layouts/Layout.vue\",\n  ...\n}\n\n:::\nLayout Component\nSuppose your theme layouts folder is as follows:\n::: vue\ntheme\n└── layouts\n   ├── Layout.vue\n   ├── AnotherLayout.vue\n   └── 404.vue\n:::\nThen, all the pages will use Layout.vue as layout component by default, while the routes not matching will use 404.vue.\nIf you want to switch the layout of some pages to AnotherLayout.vue, you just need to update the frontmatter of this page:\n---\nlayout: AnotherLayout\n---\n\n::: tip\nEach layout component may render distinct pages. If you want to apply some global UI (e.g. global header), consider using globalLayout。\n:::\nApply plugins\nYou can apply some plugins to the theme via theme/index.js.\nmodule.exports = {\n  plugins: [\n    ['@vuepress/pwa', {\n      serviceWorker: true,\n      updatePopup: true\n    }]\n  ]\n}\n\nSite and Page Metadata\nThe Layout component will be invoked once for every .md file in docs, and the metadata for the entire site and that specific page will be exposed respectively as this.$site and this.$page properties which are injected into every component in the app.\nThis is the value of $site of this very website:\n{\n  \"title\": \"VuePress\",\n  \"description\": \"Vue-powered Static Site Generator\",\n  \"base\": \"/\",\n  \"pages\": [\n    {\n      \"lastUpdated\": 1524027677000,\n      \"path\": \"/\",\n      \"title\": \"VuePress\",\n      \"frontmatter\": {}\n    },\n    ...\n  ]\n}\n\ntitle, description and base are copied from respective fields in .vuepress/config.js. pages contains an array of metadata objects for each page, including its path, page title (explicitly specified in YAML front matter or inferred from the first header on the page), and any YAML front matter data in that file.\nThis is the $page object for this page you are looking at:\n{\n  \"lastUpdated\": 1524847549000,\n  \"path\": \"/guide/custom-themes.html\",\n  \"title\": \"Custom Themes\",\n  \"headers\": [/* ... */],\n  \"frontmatter\": {}\n}\n\nIf the user provided themeConfig in .vuepress/config.js, it will also be available as $site.themeConfig. You can use this to allow users to customize behavior of your theme - for example, specifying categories and page order. You can then use these data together with $site.pages to dynamically construct navigation links.\nFinally, don't forget that this.$route and this.$router are also available as part of Vue Router's API.\n::: tip\nlastUpdated is the UNIX timestamp of this file's last git commit, for more details, refer to Last Updated.\n:::\nContent Excerpt\nIf a markdown file contains a `",
            "date_modified": "2019-05-06T00:00:00.000Z"
        },
        {
            "id": "https://ace520.github.io/blog/2018/11/07/frontmatter-in-vuepress-3/",
            "url": "https://ace520.github.io/blog/2018/11/07/frontmatter-in-vuepress-3/",
            "title": "frontmatter in vuepress 3",
            "summary": "::: tip\nFront matter variables are optional in VuePress.\n:::",
            "date_modified": "2018-11-07T00:00:00.000Z"
        }
    ]
}