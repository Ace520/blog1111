<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ace520.github.io/blog</id>
    <title>ACE-BLOG</title>
    <updated>2020-05-23T04:53:29.916Z</updated>
    <generator>https://github.com/webmasterish/vuepress-plugin-feed</generator>
    <link rel="alternate" href="https://ace520.github.io/blog"/>
    <link rel="self" href="https://ace520.github.io/blog/feed.atom"/>
    <subtitle>Ace blog</subtitle>
    <entry>
        <title type="html"><![CDATA[frontmatter in vuepress 2]]></title>
        <id>https://ace520.github.io/blog/2018/11/07/frontmatter-in-vuepress-2/</id>
        <link href="https://ace520.github.io/blog/2018/11/07/frontmatter-in-vuepress-2/">
        </link>
        <updated>2018-11-07T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Any markdown file that contains a YAML front matter block will be processed by gray-matter. The front matter must be the first thing in the markdown file and must take the form of valid YAML set between triple-dashed lines. Here is a basic example:]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[frontmatter in vuepress 3]]></title>
        <id>https://ace520.github.io/blog/2018/11/07/frontmatter-in-vuepress-3/</id>
        <link href="https://ace520.github.io/blog/2018/11/07/frontmatter-in-vuepress-3/">
        </link>
        <updated>2018-11-07T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[`]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[frontmatter in vuepress 1]]></title>
        <id>https://ace520.github.io/blog/2018/11/07/frontmatter-in-vuepress/</id>
        <link href="https://ace520.github.io/blog/2018/11/07/frontmatter-in-vuepress/">
        </link>
        <updated>2018-11-07T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Between these triple-dashed lines, you can set predefined variables (see below for a reference), or even create custom ones of your own. These variables will then be available to you to access using $frontmatter at the rest of the page, plus all custom and theming components.]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Travis CI持续集成服务]]></title>
        <id>https://ace520.github.io/blog/2019/06/18/travis-ci-tutorial/</id>
        <link href="https://ace520.github.io/blog/2019/06/18/travis-ci-tutorial/">
        </link>
        <updated>2019-06-18T00:00:00.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[Markdown Slot 2]]></title>
        <id>https://ace520.github.io/blog/2019/02/26/markdown-slot-2/</id>
        <link href="https://ace520.github.io/blog/2019/02/26/markdown-slot-2/">
        </link>
        <updated>2019-02-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[VuePress implements a content distribution API for Markdown. With this feature, you can split your document into multiple fragments to facilitate flexible composition in the layout component.]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Markdown Slot 3]]></title>
        <id>https://ace520.github.io/blog/2019/02/26/markdown-slot-3/</id>
        <link href="https://ace520.github.io/blog/2019/02/26/markdown-slot-3/">
        </link>
        <updated>2019-02-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[First, let's review the relationship between layout components and markdown files:]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Markdown Slot 4]]></title>
        <id>https://ace520.github.io/blog/2019/02/26/markdown-slot-4/</id>
        <link href="https://ace520.github.io/blog/2019/02/26/markdown-slot-4/">
        </link>
        <updated>2019-02-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Here's some contact info]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Markdown Slot 1]]></title>
        <id>https://ace520.github.io/blog/2019/02/26/markdown-slot/</id>
        <link href="https://ace520.github.io/blog/2019/02/26/markdown-slot/">
        </link>
        <updated>2019-02-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Markdown files are providers of metadata (Page content, Configuration, etc.), while layout components consume them. We can use frontmatter to define some metadata for common data types, but frontmatter is hard to do something about markdown / HTML, a complex metadata that involves differences before and after compilation.]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[writing a vuepress theme 2]]></title>
        <id>https://ace520.github.io/blog/2019/05/06/writing-a-vuepress-theme-2/</id>
        <link href="https://ace520.github.io/blog/2019/05/06/writing-a-vuepress-theme-2/">
        </link>
        <updated>2019-05-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[To write a theme, create a .vuepress/theme directory in your docs root, and then create a Layout.vue file:
.
└─ .vuepress
   └─ theme
       └─ Layout.vue

From there it's the same as developing a normal Vue application. It is entirely up to you how to organize your theme.
Content Outlet
The compiled content of the current .md file being rendered will be available as a special &lt;Content/&gt; global component. You will need to render it somewhere in your layout in order to display the content of the page. The simplest theme can be just a single Layout.vue component with the following content:
&lt;template>
  &lt;div class="theme-container">
    &lt;Content/>
  &lt;/div>
&lt;/template>

Also see:

Markdown Slot

Directory Structure
Just one Layout.vue might not be enough, and you might also want to define more layout components in the theme for using on different pages. You may also want to customize the palette, and even apply some plugins.
So it's time to reorganize your theme, an agreed theme directory structure is as follows:
::: vue
theme
├── global-components
│   └── xxx.vue
├── components
│   └── xxx.vue
├── layouts
│   ├── Layout.vue (Mandatory)
│   └── 404.vue
├── styles
│   ├── index.styl
│   └── palette.styl
├── templates
│   ├── dev.html
│   └── ssr.html
├── index.js
├── enhanceApp.js
└── package.json
:::

theme/global-components: Components under this directory will be automatically registered as global components. For details, please refer to @vuepress/plugin-register-components.
theme/components: Your components.
theme/layouts: Layout components of the theme, where Layout.vue is required.
theme/styles: Global style and palette.
theme/templates: Modify default template.
theme/index.js: Entry file of theme configuration.
theme/enhanceApp.js: Theme level enhancements.

::: warning Note
When you publish your theme as an NPM package, if you don't have any theme configuration, that means you don't have theme/index.js, you'll need to set the &quot;main&quot; field  to layouts/Layout.vue in package.json, only in this way VuePress can correctly resolve the theme.
{
  ...
  "main": "layouts/Layout.vue",
  ...
}

:::
Layout Component
Suppose your theme layouts folder is as follows:
::: vue
theme
└── layouts
   ├── Layout.vue
   ├── AnotherLayout.vue
   └── 404.vue
:::
Then, all the pages will use Layout.vue as layout component by default, while the routes not matching will use 404.vue.
If you want to switch the layout of some pages to AnotherLayout.vue, you just need to update the frontmatter of this page:
---
layout: AnotherLayout
---

::: tip
Each layout component may render distinct pages. If you want to apply some global UI (e.g. global header), consider using globalLayout。
:::
Apply plugins
You can apply some plugins to the theme via theme/index.js.
module.exports = {
  plugins: [
    ['@vuepress/pwa', {
      serviceWorker: true,
      updatePopup: true
    }]
  ]
}

Site and Page Metadata
The Layout component will be invoked once for every .md file in docs, and the metadata for the entire site and that specific page will be exposed respectively as this.$site and this.$page properties which are injected into every component in the app.
This is the value of $site of this very website:
{
  "title": "VuePress",
  "description": "Vue-powered Static Site Generator",
  "base": "/",
  "pages": [
    {
      "lastUpdated": 1524027677000,
      "path": "/",
      "title": "VuePress",
      "frontmatter": {}
    },
    ...
  ]
}

title, description and base are copied from respective fields in .vuepress/config.js. pages contains an array of metadata objects for each page, including its path, page title (explicitly specified in YAML front matter or inferred from the first header on the page), and any YAML front matter data in that file.
This is the $page object for this page you are looking at:
{
  "lastUpdated": 1524847549000,
  "path": "/guide/custom-themes.html",
  "title": "Custom Themes",
  "headers": [/* ... */],
  "frontmatter": {}
}

If the user provided themeConfig in .vuepress/config.js, it will also be available as $site.themeConfig. You can use this to allow users to customize behavior of your theme - for example, specifying categories and page order. You can then use these data together with $site.pages to dynamically construct navigation links.
Finally, don't forget that this.$route and this.$router are also available as part of Vue Router's API.
::: tip
lastUpdated is the UNIX timestamp of this file's last git commit, for more details, refer to Last Updated.
:::
Content Excerpt
If a markdown file contains a `]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[writing a vuepress theme 3]]></title>
        <id>https://ace520.github.io/blog/2019/05/06/writing-a-vuepress-theme-3/</id>
        <link href="https://ace520.github.io/blog/2019/05/06/writing-a-vuepress-theme-3/">
        </link>
        <updated>2019-05-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[To write a theme, create a .vuepress/theme directory in your docs root, and then create a Layout.vue file:
.
└─ .vuepress
   └─ theme
       └─ Layout.vue

From there it's the same as developing a normal Vue application. It is entirely up to you how to organize your theme.
Content Outlet
The compiled content of the current .md file being rendered will be available as a special &lt;Content/&gt; global component. You will need to render it somewhere in your layout in order to display the content of the page. The simplest theme can be just a single Layout.vue component with the following content:
&lt;template>
  &lt;div class="theme-container">
    &lt;Content/>
  &lt;/div>
&lt;/template>

Also see:

Markdown Slot

Directory Structure
Just one Layout.vue might not be enough, and you might also want to define more layout components in the theme for using on different pages. You may also want to customize the palette, and even apply some plugins.
So it's time to reorganize your theme, an agreed theme directory structure is as follows:
::: vue
theme
├── global-components
│   └── xxx.vue
├── components
│   └── xxx.vue
├── layouts
│   ├── Layout.vue (Mandatory)
│   └── 404.vue
├── styles
│   ├── index.styl
│   └── palette.styl
├── templates
│   ├── dev.html
│   └── ssr.html
├── index.js
├── enhanceApp.js
└── package.json
:::

theme/global-components: Components under this directory will be automatically registered as global components. For details, please refer to @vuepress/plugin-register-components.
theme/components: Your components.
theme/layouts: Layout components of the theme, where Layout.vue is required.
theme/styles: Global style and palette.
theme/templates: Modify default template.
theme/index.js: Entry file of theme configuration.
theme/enhanceApp.js: Theme level enhancements.

::: warning Note
When you publish your theme as an NPM package, if you don't have any theme configuration, that means you don't have theme/index.js, you'll need to set the &quot;main&quot; field  to layouts/Layout.vue in package.json, only in this way VuePress can correctly resolve the theme.
{
  ...
  "main": "layouts/Layout.vue",
  ...
}

:::
Layout Component
Suppose your theme layouts folder is as follows:
::: vue
theme
└── layouts
   ├── Layout.vue
   ├── AnotherLayout.vue
   └── 404.vue
:::
Then, all the pages will use Layout.vue as layout component by default, while the routes not matching will use 404.vue.
If you want to switch the layout of some pages to AnotherLayout.vue, you just need to update the frontmatter of this page:
---
layout: AnotherLayout
---

::: tip
Each layout component may render distinct pages. If you want to apply some global UI (e.g. global header), consider using globalLayout。
:::
Apply plugins
You can apply some plugins to the theme via theme/index.js.
module.exports = {
  plugins: [
    ['@vuepress/pwa', {
      serviceWorker: true,
      updatePopup: true
    }]
  ]
}

Site and Page Metadata
The Layout component will be invoked once for every .md file in docs, and the metadata for the entire site and that specific page will be exposed respectively as this.$site and this.$page properties which are injected into every component in the app.
This is the value of $site of this very website:
{
  "title": "VuePress",
  "description": "Vue-powered Static Site Generator",
  "base": "/",
  "pages": [
    {
      "lastUpdated": 1524027677000,
      "path": "/",
      "title": "VuePress",
      "frontmatter": {}
    },
    ...
  ]
}

title, description and base are copied from respective fields in .vuepress/config.js. pages contains an array of metadata objects for each page, including its path, page title (explicitly specified in YAML front matter or inferred from the first header on the page), and any YAML front matter data in that file.
This is the $page object for this page you are looking at:
{
  "lastUpdated": 1524847549000,
  "path": "/guide/custom-themes.html",
  "title": "Custom Themes",
  "headers": [/* ... */],
  "frontmatter": {}
}

If the user provided themeConfig in .vuepress/config.js, it will also be available as $site.themeConfig. You can use this to allow users to customize behavior of your theme - for example, specifying categories and page order. You can then use these data together with $site.pages to dynamically construct navigation links.
Finally, don't forget that this.$route and this.$router are also available as part of Vue Router's API.
::: tip
lastUpdated is the UNIX timestamp of this file's last git commit, for more details, refer to Last Updated.
:::
Content Excerpt
If a markdown file contains a `]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[writing a vuepress theme 4]]></title>
        <id>https://ace520.github.io/blog/2019/05/06/writing-a-vuepress-theme-4/</id>
        <link href="https://ace520.github.io/blog/2019/05/06/writing-a-vuepress-theme-4/">
        </link>
        <updated>2019-05-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[To write a theme, create a .vuepress/theme directory in your docs root, and then create a Layout.vue file:
.
└─ .vuepress
   └─ theme
       └─ Layout.vue

From there it's the same as developing a normal Vue application. It is entirely up to you how to organize your theme.
Content Outlet
The compiled content of the current .md file being rendered will be available as a special &lt;Content/&gt; global component. You will need to render it somewhere in your layout in order to display the content of the page. The simplest theme can be just a single Layout.vue component with the following content:
&lt;template>
  &lt;div class="theme-container">
    &lt;Content/>
  &lt;/div>
&lt;/template>

Also see:

Markdown Slot

Directory Structure
Just one Layout.vue might not be enough, and you might also want to define more layout components in the theme for using on different pages. You may also want to customize the palette, and even apply some plugins.
So it's time to reorganize your theme, an agreed theme directory structure is as follows:
::: vue
theme
├── global-components
│   └── xxx.vue
├── components
│   └── xxx.vue
├── layouts
│   ├── Layout.vue (Mandatory)
│   └── 404.vue
├── styles
│   ├── index.styl
│   └── palette.styl
├── templates
│   ├── dev.html
│   └── ssr.html
├── index.js
├── enhanceApp.js
└── package.json
:::

theme/global-components: Components under this directory will be automatically registered as global components. For details, please refer to @vuepress/plugin-register-components.
theme/components: Your components.
theme/layouts: Layout components of the theme, where Layout.vue is required.
theme/styles: Global style and palette.
theme/templates: Modify default template.
theme/index.js: Entry file of theme configuration.
theme/enhanceApp.js: Theme level enhancements.

::: warning Note
When you publish your theme as an NPM package, if you don't have any theme configuration, that means you don't have theme/index.js, you'll need to set the &quot;main&quot; field  to layouts/Layout.vue in package.json, only in this way VuePress can correctly resolve the theme.
{
  ...
  "main": "layouts/Layout.vue",
  ...
}

:::
Layout Component
Suppose your theme layouts folder is as follows:
::: vue
theme
└── layouts
   ├── Layout.vue
   ├── AnotherLayout.vue
   └── 404.vue
:::
Then, all the pages will use Layout.vue as layout component by default, while the routes not matching will use 404.vue.
If you want to switch the layout of some pages to AnotherLayout.vue, you just need to update the frontmatter of this page:
---
layout: AnotherLayout
---

::: tip
Each layout component may render distinct pages. If you want to apply some global UI (e.g. global header), consider using globalLayout。
:::
Apply plugins
You can apply some plugins to the theme via theme/index.js.
module.exports = {
  plugins: [
    ['@vuepress/pwa', {
      serviceWorker: true,
      updatePopup: true
    }]
  ]
}

Site and Page Metadata
The Layout component will be invoked once for every .md file in docs, and the metadata for the entire site and that specific page will be exposed respectively as this.$site and this.$page properties which are injected into every component in the app.
This is the value of $site of this very website:
{
  "title": "VuePress",
  "description": "Vue-powered Static Site Generator",
  "base": "/",
  "pages": [
    {
      "lastUpdated": 1524027677000,
      "path": "/",
      "title": "VuePress",
      "frontmatter": {}
    },
    ...
  ]
}

title, description and base are copied from respective fields in .vuepress/config.js. pages contains an array of metadata objects for each page, including its path, page title (explicitly specified in YAML front matter or inferred from the first header on the page), and any YAML front matter data in that file.
This is the $page object for this page you are looking at:
{
  "lastUpdated": 1524847549000,
  "path": "/guide/custom-themes.html",
  "title": "Custom Themes",
  "headers": [/* ... */],
  "frontmatter": {}
}

If the user provided themeConfig in .vuepress/config.js, it will also be available as $site.themeConfig. You can use this to allow users to customize behavior of your theme - for example, specifying categories and page order. You can then use these data together with $site.pages to dynamically construct navigation links.
Finally, don't forget that this.$route and this.$router are also available as part of Vue Router's API.
::: tip
lastUpdated is the UNIX timestamp of this file's last git commit, for more details, refer to Last Updated.
:::
Content Excerpt
If a markdown file contains a `]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Writing a vuepress theme 1]]></title>
        <id>https://ace520.github.io/blog/2019/05/06/writing-a-vuepress-theme/</id>
        <link href="https://ace520.github.io/blog/2019/05/06/writing-a-vuepress-theme/">
        </link>
        <updated>2019-05-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[To write a theme, create a .vuepress/theme directory in your docs root, and then create a Layout.vue file:
.
└─ .vuepress
   └─ theme
       └─ Layout.vue

From there it's the same as developing a normal Vue application. It is entirely up to you how to organize your theme.
Content Outlet
The compiled content of the current .md file being rendered will be available as a special &lt;Content/&gt; global component. You will need to render it somewhere in your layout in order to display the content of the page. The simplest theme can be just a single Layout.vue component with the following content:
&lt;template>
  &lt;div class="theme-container">
    &lt;Content/>
  &lt;/div>
&lt;/template>

Also see:

Markdown Slot

Directory Structure
Just one Layout.vue might not be enough, and you might also want to define more layout components in the theme for using on different pages. You may also want to customize the palette, and even apply some plugins.
So it's time to reorganize your theme, an agreed theme directory structure is as follows:
::: vue
theme
├── global-components
│   └── xxx.vue
├── components
│   └── xxx.vue
├── layouts
│   ├── Layout.vue (Mandatory)
│   └── 404.vue
├── styles
│   ├── index.styl
│   └── palette.styl
├── templates
│   ├── dev.html
│   └── ssr.html
├── index.js
├── enhanceApp.js
└── package.json
:::

theme/global-components: Components under this directory will be automatically registered as global components. For details, please refer to @vuepress/plugin-register-components.
theme/components: Your components.
theme/layouts: Layout components of the theme, where Layout.vue is required.
theme/styles: Global style and palette.
theme/templates: Modify default template.
theme/index.js: Entry file of theme configuration.
theme/enhanceApp.js: Theme level enhancements.

::: warning Note
When you publish your theme as an NPM package, if you don't have any theme configuration, that means you don't have theme/index.js, you'll need to set the &quot;main&quot; field  to layouts/Layout.vue in package.json, only in this way VuePress can correctly resolve the theme.
{
  ...
  "main": "layouts/Layout.vue",
  ...
}

:::
Layout Component
Suppose your theme layouts folder is as follows:
::: vue
theme
└── layouts
   ├── Layout.vue
   ├── AnotherLayout.vue
   └── 404.vue
:::
Then, all the pages will use Layout.vue as layout component by default, while the routes not matching will use 404.vue.
If you want to switch the layout of some pages to AnotherLayout.vue, you just need to update the frontmatter of this page:
---
layout: AnotherLayout
---

::: tip
Each layout component may render distinct pages. If you want to apply some global UI (e.g. global header), consider using globalLayout。
:::
Apply plugins
You can apply some plugins to the theme via theme/index.js.
module.exports = {
  plugins: [
    ['@vuepress/pwa', {
      serviceWorker: true,
      updatePopup: true
    }]
  ]
}

Site and Page Metadata
The Layout component will be invoked once for every .md file in docs, and the metadata for the entire site and that specific page will be exposed respectively as this.$site and this.$page properties which are injected into every component in the app.
This is the value of $site of this very website:
{
  "title": "VuePress",
  "description": "Vue-powered Static Site Generator",
  "base": "/",
  "pages": [
    {
      "lastUpdated": 1524027677000,
      "path": "/",
      "title": "VuePress",
      "frontmatter": {}
    },
    ...
  ]
}

title, description and base are copied from respective fields in .vuepress/config.js. pages contains an array of metadata objects for each page, including its path, page title (explicitly specified in YAML front matter or inferred from the first header on the page), and any YAML front matter data in that file.
This is the $page object for this page you are looking at:
{
  "lastUpdated": 1524847549000,
  "path": "/guide/custom-themes.html",
  "title": "Custom Themes",
  "headers": [/* ... */],
  "frontmatter": {}
}

If the user provided themeConfig in .vuepress/config.js, it will also be available as $site.themeConfig. You can use this to allow users to customize behavior of your theme - for example, specifying categories and page order. You can then use these data together with $site.pages to dynamically construct navigation links.
Finally, don't forget that this.$route and this.$router are also available as part of Vue Router's API.
::: tip
lastUpdated is the UNIX timestamp of this file's last git commit, for more details, refer to Last Updated.
:::
Content Excerpt
If a markdown file contains a `]]></summary>
    </entry>
</feed>